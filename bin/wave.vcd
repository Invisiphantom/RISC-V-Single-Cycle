$date
	Fri Dec 22 21:54:18 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module arch_tb $end
$var reg 1 ! clk $end
$scope module arch_inst $end
$var wire 1 ! clk $end
$var wire 1 " zero $end
$var wire 32 # writeData_R [31:0] $end
$var wire 1 $ u_less $end
$var wire 1 % s_less $end
$var wire 32 & readData_M [31:0] $end
$var wire 32 ' readData2_R [31:0] $end
$var wire 32 ( readData1_R [31:0] $end
$var wire 32 ) instruction [31:0] $end
$var wire 32 * imm [31:0] $end
$var wire 32 + aluResult [31:0] $end
$var wire 4 , aluControl [3:0] $end
$var wire 32 - aluB [31:0] $end
$var wire 32 . aluA [31:0] $end
$var wire 1 / RegWrite $end
$var wire 32 0 PCnext [31:0] $end
$var wire 32 1 PCincre [31:0] $end
$var wire 32 2 PCaddress [31:0] $end
$var wire 1 3 MemWrite $end
$var wire 1 4 MemRead $end
$var wire 1 5 Lui $end
$var wire 1 6 JumpReg $end
$var wire 1 7 Jump $end
$var wire 1 8 Halt $end
$var wire 1 9 Cnd $end
$var wire 1 : Branch $end
$var wire 1 ; Auipc $end
$var wire 1 < ALUSrc $end
$var wire 2 = ALUOp [1:0] $end
$scope module u_ALU $end
$var wire 1 " zero $end
$var wire 1 $ u_less $end
$var wire 1 % s_less $end
$var wire 4 > aluControl [3:0] $end
$var wire 32 ? aluB [31:0] $end
$var wire 32 @ aluA [31:0] $end
$var reg 32 A aluResult [31:0] $end
$upscope $end
$scope module u_ALUControl $end
$var wire 3 B funct3 [2:0] $end
$var wire 1 C funct7_30 $end
$var wire 2 D ALUOp [1:0] $end
$var reg 4 E aluControl [3:0] $end
$upscope $end
$scope module u_ALU_A $end
$var wire 32 F readData1_R [31:0] $end
$var wire 32 G PCaddress [31:0] $end
$var wire 1 5 Lui $end
$var wire 1 ; Auipc $end
$var reg 32 H aluA [31:0] $end
$upscope $end
$scope module u_ALU_B $end
$var wire 32 I readData2_R [31:0] $end
$var wire 32 J imm [31:0] $end
$var wire 1 < ALUSrc $end
$var reg 32 K aluB [31:0] $end
$upscope $end
$scope module u_Branch $end
$var wire 3 L funct3 [2:0] $end
$var wire 1 % s_less $end
$var wire 1 $ u_less $end
$var wire 1 " zero $end
$var wire 1 7 Jump $end
$var wire 1 : Branch $end
$var reg 1 9 Cnd $end
$upscope $end
$scope module u_Control $end
$var wire 7 M Opcode [6:0] $end
$var wire 1 / RegWrite $end
$var wire 1 3 MemWrite $end
$var wire 1 4 MemRead $end
$var wire 1 5 Lui $end
$var wire 1 6 JumpReg $end
$var wire 1 7 Jump $end
$var wire 1 : Branch $end
$var wire 1 ; Auipc $end
$var wire 1 < ALUSrc $end
$var wire 2 N ALUOp [1:0] $end
$var reg 1 8 Halt $end
$var reg 11 O control [10:0] $end
$upscope $end
$scope module u_ImmGen $end
$var wire 32 P instruction [31:0] $end
$var wire 7 Q Opcode [6:0] $end
$var reg 32 R imm [31:0] $end
$upscope $end
$scope module u_InstMem $end
$var wire 32 S instruction [31:0] $end
$var wire 32 T PCaddress [31:0] $end
$upscope $end
$scope module u_Mem $end
$var wire 1 4 MemRead $end
$var wire 1 3 MemWrite $end
$var wire 1 ! clk $end
$var wire 3 U funct3 [2:0] $end
$var wire 32 V memAddr [31:0] $end
$var wire 32 W writeData_M [31:0] $end
$var reg 32 X readData_M [31:0] $end
$upscope $end
$scope module u_PC $end
$var wire 1 ! clk $end
$var wire 32 Y PCnext [31:0] $end
$var reg 32 Z PCaddress [31:0] $end
$upscope $end
$scope module u_PCIncre $end
$var wire 32 [ PCaddress [31:0] $end
$var wire 32 \ PCincre [31:0] $end
$upscope $end
$scope module u_PCNext $end
$var wire 1 9 Cnd $end
$var wire 1 8 Halt $end
$var wire 1 6 JumpReg $end
$var wire 32 ] PCaddress [31:0] $end
$var wire 32 ^ PCincre [31:0] $end
$var wire 32 _ aluResult [31:0] $end
$var wire 32 ` imm [31:0] $end
$var reg 32 a PCnext [31:0] $end
$upscope $end
$scope module u_RegWrite $end
$var wire 1 7 Jump $end
$var wire 1 6 JumpReg $end
$var wire 1 4 MemRead $end
$var wire 32 b PCincre [31:0] $end
$var wire 32 c aluResult [31:0] $end
$var wire 32 d readData_M [31:0] $end
$var reg 32 e writeData_R [31:0] $end
$upscope $end
$scope module u_Regs $end
$var wire 1 / RegWrite $end
$var wire 1 ! clk $end
$var wire 5 f readReg1 [4:0] $end
$var wire 5 g readReg2 [4:0] $end
$var wire 32 h writeData_R [31:0] $end
$var wire 5 i writeReg [4:0] $end
$var wire 32 j x0 [31:0] $end
$var wire 32 k x1 [31:0] $end
$var wire 32 l x2 [31:0] $end
$var wire 32 m x3 [31:0] $end
$var wire 32 n x4 [31:0] $end
$var wire 32 o x5 [31:0] $end
$var wire 32 p x6 [31:0] $end
$var reg 32 q readData1_R [31:0] $end
$var reg 32 r readData2_R [31:0] $end
$var integer 32 s i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b1 i
b1 h
b1 g
b0 f
b1 e
bx d
b1 c
b100 b
b100 a
b1 `
b1 _
b100 ^
b0 ]
b100 \
b0 [
b0 Z
b100 Y
bx X
b0 W
b1 V
b0 U
b0 T
b100000000000010010011 S
b1 R
b10011 Q
b100000000000010010011 P
b11110000000 O
b11 N
b10011 M
b0 L
b1 K
b1 J
b0 I
b0 H
b0 G
b0 F
b10 E
b11 D
0C
b0 B
b1 A
b0 @
b1 ?
b10 >
b11 =
1<
0;
0:
09
08
07
06
05
04
03
b0 2
b100 1
b100 0
1/
b0 .
b1 -
b10 ,
b1 +
b1 *
b100000000000010010011 )
b0 (
b0 '
bx &
1%
1$
b1 #
0"
0!
$end
#5
b10 #
b10 e
b10 h
b10 +
b10 A
b10 V
b10 _
b10 c
b10 -
b10 ?
b10 K
b10 *
b10 J
b10 R
b10 `
b1000 0
b1000 Y
b1000 a
b10 i
b10 g
b1000000000000100010011 )
b1000000000000100010011 P
b1000000000000100010011 S
b1000 1
b1000 \
b1000 ^
b1000 b
b100 2
b100 G
b100 T
b100 Z
b100 [
b100 ]
b1 k
1!
#10
0!
#15
b11 #
b11 e
b11 h
b11 +
b11 A
b11 V
b11 _
b11 c
b11 -
b11 ?
b11 K
b11 *
b11 J
b11 R
b11 `
b1100 0
b1100 Y
b1100 a
b11 i
b11 g
b1100000000000110010011 )
b1100000000000110010011 P
b1100000000000110010011 S
b10 l
b1100 1
b1100 \
b1100 ^
b1100 b
b1000 2
b1000 G
b1000 T
b1000 Z
b1000 [
b1000 ]
1!
#20
0!
#25
b100 #
b100 e
b100 h
b100 +
b100 A
b100 V
b100 _
b100 c
b100 -
b100 ?
b100 K
b100 *
b100 J
b100 R
b100 `
b10000 0
b10000 Y
b10000 a
b100 i
b100 g
b10000000000001000010011 )
b10000000000001000010011 P
b10000000000001000010011 S
b10000 1
b10000 \
b10000 ^
b10000 b
b1100 2
b1100 G
b1100 T
b1100 Z
b1100 [
b1100 ]
b11 m
1!
#30
0!
#35
bx #
bx e
bx h
x"
bx +
bx A
bx V
bx _
bx c
x/
x<
bx =
bx D
bx N
x4
x3
x:
x7
x6
x5
x;
x$
x%
bx -
bx ?
bx K
bx O
18
bx *
bx J
bx R
bx `
b10000 0
b10000 Y
b10000 a
b0 Q
b0 i
b0 g
b0 M
b0 )
b0 P
b0 S
b100 n
b10100 1
b10100 \
b10100 ^
b10100 b
b10000 2
b10000 G
b10000 T
b10000 Z
b10000 [
b10000 ]
1!
#40
0!
#45
1!
#50
0!
#55
1!
#60
0!
#65
1!
#70
0!
#75
1!
#80
0!
#85
1!
#90
0!
#95
1!
#100
0!
#105
1!
#110
0!
#115
1!
#120
0!
#125
1!
#130
0!
#135
1!
#140
0!
#145
1!
#150
0!
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
#325
1!
#330
0!
#335
1!
#340
0!
#345
1!
#350
0!
#355
1!
#360
0!
#365
1!
#370
0!
#375
1!
#380
0!
#385
1!
#390
0!
#395
1!
#400
0!
#405
1!
#410
0!
#415
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
0!
#555
1!
#560
0!
#565
1!
#570
0!
#575
1!
#580
0!
#585
1!
#590
0!
#595
1!
#600
0!
#605
1!
#610
0!
#615
1!
#620
0!
#625
1!
#630
0!
#635
1!
#640
0!
#645
1!
#650
0!
#655
1!
#660
0!
#665
1!
#670
0!
#675
1!
#680
0!
#685
1!
#690
0!
#695
1!
#700
0!
#705
1!
#710
0!
#715
1!
#720
0!
#725
1!
#730
0!
#735
1!
#740
0!
#745
1!
#750
0!
#755
1!
#760
0!
#765
1!
#770
0!
#775
1!
#780
0!
#785
1!
#790
0!
#795
1!
#800
0!
#805
1!
#810
0!
#815
1!
#820
0!
#825
1!
#830
0!
#835
1!
#840
0!
#845
1!
#850
0!
#855
1!
#860
0!
#865
1!
#870
0!
#875
1!
#880
0!
#885
1!
#890
0!
#895
1!
#900
0!
#905
1!
#910
0!
#915
1!
#920
0!
#925
1!
#930
0!
#935
1!
#940
0!
#945
1!
#950
0!
#955
1!
#960
0!
#965
1!
#970
0!
#975
1!
#980
0!
#985
1!
#990
0!
#995
1!
#1000
